            component (first (entity entity-component-db))
            enharmonic-keys (enharmonics entity)]]
  (when ((complement empty?) enharmonic-keys)
    (swap! (:enharmonics component) enharmonic-keys)))
(for [ec entity-component-db
      :let [entity (first ec)
            component (first (entity entity-component-db))
            enharmonic-keys (enharmonics entity)]]
  enharmonic-keys)
(for [ec entity-component-db
      :let [entity (first ec)
            component (first (entity entity-component-db))
            enharmonic-keys (enharmonics entity)]]
  component)
(for [ec entity-component-db
      :let [entity (first ec)
            component (first (entity entity-component-db))
        ]];    enharmonic-keys (enharmonics entity)]]
  component)
(defn enharmonics [sound]
  (let [enharmonic-keys (filter #(not= entity %) (enharmonic-entities sound))]
    enharmonic-keys))
(for [ec entity-component-db
      :let [entity (first ec)
            component (first (entity entity-component-db))
            sound @(:sound component)
        ]];    enharmonic-keys (enharmonics entity)]]
  sound)
(for [ec entity-component-db
      :let [entity (first ec)
            component (first (entity entity-component-db))
            sound @(:sound component)
            enharmonic-keys (enharmonics sound)]]
  sound)
(enharmonic-entities (:F5 :A6))
(enharmonic-entities (:C4 :G4))
dyad-entities
(enharmonic-entities (:C4 :G4))
(defn enharmonic-entities [sound]
  (let [entities (if (= (count sound) 2) dyad-entities triad-entities)
        entity-components (filter #(same-sounds? sound @(:sound (last %))) entities)]
    (map #(first %) entity-components)))
(enharmonic-entities (:C4 :G4))
(defn enharmonic-entities [sound]
  (println sound)
  (let [entities (if (= (count sound) 2) dyad-entities triad-entities)
        entity-components (filter #(same-sounds? sound @(:sound (last %))) entities)]
    (map #(first %) entity-components)))
(enharmonic-entities `(:C4 :G4))
(defn enharmonic-entities [sound]
  (let [entities (if (= (count sound) 2) dyad-entities triad-entities)
        entity-components (filter #(same-sounds? sound @(:sound (last %))) entities)]
    (map #(first %) entity-components)))
(defn enharmonics [sound]
  (let [enharmonic-keys (filter #(not= entity %) (enharmonic-entities sound))]
    enharmonic-keys))
(enharmonics `(:C4 :G4))
(enharmonic-entities `(:G4 :C4))
(for [ec entity-component-db
      :let [entity (first ec)
            component (first (entity entity-component-db))
            sound @(:sound component)
            enharmonic-keys (enharmonic-entities sound)]]
  sound)
           (enharmonic-entities `(:A4))
(for [ec entity-component-db
      :let [entity (first ec)
            component (first (entity entity-component-db))
            sound @(:sound component)
    ]];        enharmonic-keys (enharmonic-entities sound)]]
  sound)
(enharmonic-entities `(:A6 :E6))
(for [ec entity-component-db
      :let [entity (first ec)
            component (first (entity entity-component-db))
            sound @(:sound component)
            enharmonic-keys (enharmonic-entities (into [] sound))]]
  sound)
(for [ec entity-component-db
      :let [entity (first ec)
            component (first (entity entity-component-db))
            sound @(:sound component)
]];            enharmonic-keys (enharmonic-entities sound)]]
  sound)
(defn enharmonic-entities [sound]
  (let [entities (if (= (count sound) 2) dyad-entities triad-entities)
        entity-components (filter #(same-sounds? sound @(:sound (last %))) entities)
        p entity-components]
    (filter #(not= entity %) (map #(first %) entity-components))))
(for [ec entity-component-db
      :let [entity (first ec)
            component (first (entity entity-component-db))
            sound @(:sound component)
]];            enharmonic-keys (enharmonic-entities sound)]]
  nil)
(defn enharmonic-entities [sound]
  (let [entities (if (= (count sound) 2) dyad-entities triad-entities)
        entity-components (filter #(same-sounds? sound @(:sound (last %))) entities)
        p (println entity-components)]
    (filter #(not= entity %) (map #(first %) entity-components))))
(for [ec entity-component-db
      :let [entity (first ec)
            component (first (entity entity-component-db))
            sound @(:sound component)
            enharmonic-keys (enharmonic-entities sound)]]
  nil)
(for [ec entity-component-db
      :let [entity (first ec)
            component (first (entity entity-component-db))
            sound @(:sound component)
            p (println sound)
            enharmonic-keys (enharmonic-entities sound)]]
  nil)
(defn enharmonic-entities [sound]
  (println sound)
  (let [entities (if (= (count sound) 2) dyad-entities triad-entities)
        entity-components (filter #(same-sounds? sound @(:sound (last %))) entities)
        p (println entity-components)]
    (filter #(not= entity %) (map #(first %) entity-components))))
(for [ec entity-component-db
      :let [entity (first ec)
            component (first (entity entity-component-db))
            sound @(:sound component)
            p (println sound)
            enharmonic-keys (enharmonic-entities sound)]]
  nil)
(defn enharmonic-entities [sound]
  (println sound)
  (comment let [entities (if (= (count sound) 2) dyad-entities triad-entities)
        entity-components (filter #(same-sounds? sound @(:sound (last %))) entities)
        p (println entity-components)]
    (filter #(not= entity %) (map #(first %) entity-components))))
(for [ec entity-component-db
      :let [entity (first ec)
            component (first (entity entity-component-db))
            sound @(:sound component)
            p (println sound)
            enharmonic-keys (enharmonic-entities sound)]]
  nil)
(defn enharmonic-entities [sound]
  (println sound)
  (let [entities (if (= (count sound) 2) dyad-entities triad-entities)
        entity-components (filter #(same-sounds? sound @(:sound (last %))) entities)
        p (println entity-components)]
    nil))
(for [ec entity-component-db
      :let [entity (first ec)
            component (first (entity entity-component-db))
            sound @(:sound component)
            p (println sound)
            enharmonic-keys (enharmonic-entities sound)]]
  nil)
dyad-entities
triad-entities
(defn enharmonic-entities [sound]
  (println sound)
  (let [entities (if (= (count sound) 2) dyad-entities triad-entities)
       ; entity-components (filter #(same-sounds? sound @(:sound (last %))) entities)
        p (println entities)]
    nil))
(for [ec entity-component-db
      :let [entity (first ec)
            component (first (entity entity-component-db))
            sound @(:sound component)
            p (println sound)
            enharmonic-keys (enharmonic-entities sound)]]
  nil)
(defn enharmonic-entities [sound]
  (println sound)
  (let [entities 0; (if (= (count sound) 2) dyad-entities triad-entities)
       ; entity-components (filter #(same-sounds? sound @(:sound (last %))) entities)
        p (println entities)]
    nil))
(for [ec entity-component-db
      :let [entity (first ec)
            component (first (entity entity-component-db))
            sound @(:sound component)
            p (println sound)
            enharmonic-keys (enharmonic-entities sound)]]
  nil)
(defn enharmonic-entities [sound]
  (println sound)
  (let [entities (if (= (count sound) 2) dyad-entities triad-entities)
       ; entity-components (filter #(same-sounds? sound @(:sound (last %))) entities)]
]    nil))
(for [ec entity-component-db
      :let [entity (first ec)
            component (first (entity entity-component-db))
            sound @(:sound component)
            p (println sound)
            enharmonic-keys (enharmonic-entities sound)]]
  nil)
(defn enharmonic-entities [entity sound]
  (println entity sound)
  (let [entities (if (= (count sound) 2) dyad-entities triad-entities)
        entity-components (filter #(same-sounds? sound @(:sound (last %))) entities)]
    (filter #(not= entity %) (map #(first %) entity-components))))
(for [ec entity-component-db
      :let [entity (first ec)
            component (first (entity entity-component-db))
            sound @(:sound component)
            p (println sound)
            enharmonic-keys (enharmonic-entities entity sound)]]
  nil)
 (defn enharmonic-entities [entity sound]
  (println entity sound)
  (let [entities (if (= (count sound) 2) dyad-entities triad-entities)
        entity-components (filter #(same-sounds? sound @(:sound (last %))) entities)]
    (filter #(not= entity %) (map #(first %) entity-components))))
(for [ec entity-component-db
      :let [entity (first ec)
            component (first (entity entity-component-db))
            sound @(:sound component)
            p (println entity sound)
            enharmonic-keys (enharmonic-entities entity sound)]]
  enharmonic-keys)
(tool/deftrace enharmonic-entities [entity sound]
  (println entity sound)
  (let [entities (if (= (count sound) 2) dyad-entities triad-entities)
        entity-components (filter #(same-sounds? sound @(:sound (last %))) entities)]
    (filter #(not= entity %) (map #(first %) entity-components))))
(for [ec entity-component-db
      :let [entity (first ec)
            component (first (entity entity-component-db))
            sound @(:sound component)
            p (println entity sound)
            enharmonic-keys (enharmonic-entities entity sound)]]
  enharmonic-keys)
(for [ec entity-component-db
      :let [entity (first ec)
            component (first (entity entity-component-db))
            sound @(:sound component)
            p (println entity sound)
            ]]
  enharmonic-keys)
(for [ec entity-component-db
      :let [entity (first ec)
            component (first (entity entity-component-db))
            sound @(:sound component)
            p (println entity sound)
            ]]
  nil)
(for [ec entity-component-db
      :let [entity (first ec)
            component (first (entity entity-component-db))
            sound @(:sound component)
            p (println entity sound)
       entities (if (= (count sound) 2) dyad-entities triad-entities)
            
            ]]
  entities)
(for [ec entity-component-db
      :let [entity (first ec)
            component (first (entity entity-component-db))
            sound (into [] @(:sound component))
            p (println entity sound)
       entities (if (= (count sound) 2) dyad-entities triad-entities)
            
            ]]
  entities)
dyad-entities
(first dyad-entites)
(first dyad-entities)
(first (first dyad-entities))
(defn enharmonic-entities [sound]
  (let [entities (if (= (count sound) 2) dyad-entities triad-entities)
        entity-components (filter #(same-sounds? sound @(:sound (last %))) entities)]
    (map #(first %) entity-components)))
(for [entity-component dyad-entities
      :let [entity (first entity-component)
            component (first (entity entity-component-db))
            sound @(:sound component)
            enharmonics (filter #(not= entity %) (enharmonic-entities sound))]]
      (println entity enharmonics))
(for [entity-component dyad-entities
      :let [entity (first entity-component)
            component (first (entity entity-component-db))
            sound @(:sound component)
            enharmonics (filter #(not= entity %) (enharmonic-entities sound))]
      :when ((complement empty?) enharmonics)]
  (swap! (:enharmonics component) enharmonics))
(defn enharmonic-entities [sound]
  (let [entities (if (= (count sound) 2) dyad-entities triad-entities)
        entity-components (filter #(same-sounds? sound @(:sound (last %))) entities)]
    (map #(first %) entity-components)))
(for [entity-component dyad-entities
      :let [entity (first entity-component)
            component (first (entity entity-component-db))
            sound @(:sound component)
            enharmonics (filter #(not= entity %) (enharmonic-entities sound))]
      :when ((complement empty?) enharmonics)]
  (swap! (:enharmonics component) enharmonics))
(enharmonic-entities `(:C4 :G4))
(for [entity-component dyad-entities
      :let [entity (first entity-component)
            p (println entity)
            component (first (entity entity-component-db))
            sound @(:sound component)
            enharmonics (filter #(not= entity %) (enharmonic-entities sound))]
      :when ((complement empty?) enharmonics)]
  (swap! (:enharmonics component) enharmonics))
(for [entity-component dyad-entities
      :let [entity (first entity-component)
            ]]
  entity)
(for [entity-component dyad-entities
      :let [entity (first entity-component)
            component (first (entity entity-component-db))]]
  component)
(for [entity-component dyad-entities
      :let [entity (first entity-component)
            component (first (entity entity-component-db))
            sound @(:sound component)]]
  sound)
(for [entity-component dyad-entities
      :let [entity (first entity-component)
            component (first (entity entity-component-db))
            sound @(:sound component)]]
  (enharmonic-entities sound))
(for [entity-component dyad-entities
      :let [entity (first entity-component)
            component (first (entity entity-component-db))
            sound @(:sound component)
            enharmonics (filter #(not= entity %) (into [] (enharmonic-entities sound)))]
      :when ((complement empty?) enharmonics)]
  (swap! (:enharmonics component) enharmonics))
(for [entity-component dyad-entities
      :let [entity (first entity-component)
            component (first (entity entity-component-db))
            sound @(:sound component)
            enharmonics (enharmonic-entities sound)];(filter #(not= entity %) (into [] (enharmonic-entities sound)))]
      :when ((complement empty?) enharmonics)]
  (swap! (:enharmonics component) enharmonics))
(for [entity-component dyad-entities
      :let [entity (first entity-component)
            component (first (entity entity-component-db))
            sound @(:sound component)
            enharmonics (enharmonic-entities sound)]]
  enharmonics)
(empty? `())
(for [entity-component dyad-entities
      :let [entity (first entity-component)
            component (first (entity entity-component-db))
            sound @(:sound component)
            enharmonics (enharmonic-entities sound)]]
  (empty? enharmonics))
(filter #(not= 3 %) `(1 2 3 4))
(for [entity-component dyad-entities
      :let [entity (first entity-component)
            component (first (entity entity-component-db))
            sound @(:sound component)
            enharmonics (enharmonic-entities sound)
            enharmonics (filter #(not= entity %) enharmonics)]
      :when ((complement empty?) enharmonics)]
      enharmonics)
(for [entity-component dyad-entities
      :let [entity (first entity-component)
            component (first (entity entity-component-db))
            sound @(:sound component)
            enharmonics (enharmonic-entities sound)
            enharmonics (filter #(not= entity %) enharmonics)]
      :when ((complement empty?) enharmonics)]
  (swap! (:enharmonics component) enharmonics))
(for [entity-component dyad-entities
      :let [entity (first entity-component)
            component (first (entity entity-component-db))
         
            sound @(:sound component)
            enharmonics (enharmonic-entities sound)
            enharmonics (filter #(not= entity %) enharmonics)]
      :when ((complement empty?) enharmonics)]
  [component enharmonics])
(for [entity-component dyad-entities
      :let [entity (first entity-component)
            component (first (entity entity-component-db))
         
            sound @(:sound component)
            enharmonics (enharmonic-entities sound)
            enharmonics (filter #(not= entity %) enharmonics)]
      :when ((complement empty?) enharmonics)]
  (map #(swap! (:enharmonics component) %) enharmonics))
(def dyad-entities (entities-with-component :dyad))
dyad-entities
entity-component-db
(for [entity-component dyad-entities
      :let [entity (first entity-component)
            component (first (entity entity-component-db))
         
            sound @(:sound component)
            enharmonics (enharmonic-entities sound)
            enharmonics (filter #(not= entity %) enharmonics)]
      :when ((complement empty?) enharmonics)]
  (for [e enharmonics]
    (swap! (:enharmonics component) e)))
entity-component-db
(for [ec entity-component-db
      :let [entity (first ec)
            component (first (entity entity-component-db))]
      :when (not= :single-note (:name component))]
  (let [enharmonic-keys (enharmonic-entities entity @(:sound component))]
    (when ((complement empty?) enharmonic-keys)
      (swap! (:enharmonics component) (fn [x] enharmonic-keys)))))
(for [entity-component dyad-entities
      :let [entity (first entity-component)
            component (first (entity entity-component-db))
            sound @(:sound component)
            enharmonics (enharmonic-entities sound)
            enharmonics (filter #(not= entity %) enharmonics)]
      :when ((complement empty?) enharmonics)]
  (for [e enharmonics]
    (swap! (:enharmonics component) (fn [x] e))))
entity-component-db
dyad-entities
(defn update-enharmonics [entities]
  (for [entity-component entities
        :let [entity (first entity-component)
              component (first (entity entity-component-db))
              sound @(:sound component)
              enharmonics (enharmonic-entities sound)
              enharmonics (filter #(not= entity %) enharmonics)]
        :when ((complement empty?) enharmonics)]
    (for [e enharmonics]
      (swap! (:enharmonics component) (fn [x] e)))))
(update-enharmonics triad-entities)
(defn enharmonic-entities [sound entities]
  (let [entity-components (filter #(same-sounds? sound @(:sound (last %))) entities)]
    (map #(first %) entity-components)))
(defn update-enharmonics [entities]
  (for [entity-component entities
        :let [entity (first entity-component)
              component (first (entity entity-component-db))
              sound @(:sound component)
              enharmonics (enharmonic-entities sound entities)
              enharmonics (filter #(not= entity %) enharmonics)]
        :when ((complement empty?) enharmonics)]
    (for [e enharmonics]
      (swap! (:enharmonics component) (fn [x] e)))))
(update-enharmonics triad-entities)
entity-component-db
(defn update-enharmonics [entities]
  (for [entity-component entities
        :let [entity (first entity-component)
              component (first (entity entity-component-db))
              sound @(:sound component)
              enharmonics (enharmonic-entities sound entities)
              enharmonics (filter #(not= entity %) enharmonics)]
        :when ((complement empty?) enharmonics)]
    (swap! (:enharmonics component) (fn [x] enharmonics))))
(update-enharmonics triad-entities)
entity-component-db
(update-enharmonics dyad-entities)
entity-component-db
(def n :4b9353ad-6666-43eb-a0b0-3a9e59cc070b )
(defn highlight-keys [entity]
  (let [component (first (entity entity-component-db))
        enharmonics @(:enharmonics component)]
    (for [e enharmonics
          :let [component (first (e entity-component-db))]]
      (swap! (:played component) (fn [x] true)))))
(defn update-enharmonics [entities]
  (for [entity-component entities
        :let [entity (first entity-component)
              component (first (entity entity-component-db))
              sound @(:sound component)
              enharmonics (enharmonic-entities sound entities)]
        :when ((complement empty?) enharmonics)]
    (swap! (:enharmonics component) (fn [x] enharmonics))))
(update-enharmonics dyad-entities)
(update-enharmonics triad-entities)
n
(def n :4b9353ad-6666-43eb-a0b0-3a9e59cc070b)
(highlight-keys n)
(n entity-component-db)
(nil)
(nil?)
(do (inc 3 ) (dec 5))
exit
'(1 2 3)
(seq [1 2 3])
(seq [1 ])
exit
entity-component-db
(update-enharmonics dyad-entities)
entity-component-db
(update-enharmonics triad-entities)
entity-component-db
exit
(def entity-component-db (hash-map))
(def entity-component-db
  (update-db entity-component-db (into single-notes (into dyads triads))))
(def dyad-entities (entities-with-component :dyad))
(def triad-entities (entities-with-component :triad))
triad-entities
(update-enharmonics dyad-entities)
entity-component-db
exit
entity-component-db
(doc assoc-in)
(doc dissoc)
exit
